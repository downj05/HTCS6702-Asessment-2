import flask
import flask_login
import requests
from flask import Flask, request
import login
import tables
from time import time as get_timestamp
import json
import OTP
import sqlite3
from platform import system, machine
from socket import gethostname

app = Flask(__name__)
app.secret_key = '5adb7e8253ee317c97e1d4b20bf7693c733d8dbe509b5cd856e603fb8f56a59c'


@app.route('/login', methods=['POST'])
def login_user():
    """
    User will come here when opening the application, if they
    do not have a session ID they must login using there username,
    password and one time code. A new session ID will be generated
    and the expiry set. If they do supply a session ID, it will be
    checked to see if it is correct. If it is correct the code will
    then be checked to see if its has expired. If it passes the user can
    use their session ID to talk to the other end points.
    :return: session_id
    """
    request_json = request.get_json()
    try:
        username = request_json['username']
    except KeyError:
        print("No username supplied.")
    if request_json['session_id'] is None:
        print("No session ID provided, going to credential login")
        password = request_json['password']
        otp = request_json['otp']
        if not login.user_exists(username):
            print("User does not exist")
            return {"type":'ERROR',"message":"User does not exist!"}
        if login.check_credentials(username, password):
            print("Credential check passed!")
            print("Checking OTP...")
            if login.check_otp(username, otp):
                print("OTP check passed!")
                return {'type': 'SESSION_ASSIGNMENT', 'message': login.create_session_id(username)}
            else:
                return {'type': 'ERROR', 'message': 'One Time Password Fail!'}
        else:
            return {'type': 'ERROR', 'message': 'Credential fail!'}
    else:
        print("Authenticating with session ID")
        session_id = request_json['session_id']
        # Session ID's match and are not expired
        if login.check_session_id(session_id):
            print("Session login successful")
            return {'type': 'SESSION_LOGIN_SUCCESS', 'message': 'Session login successful!'}
        else:
            print("Session login failure")
            return {'type': 'ERROR_SESSION_EXPIRED', 'message': 'Session expired or invalid. Please login with credentials.'}


@app.route('/info', methods=['GET'])
def info():
    """
    Some information about this server
    :return:
    """
    request_json = request.get_json()
    if login.check_session_id(request_json['session_id']):
        print("Received info command")
        if get_timestamp() > login.get_session_expiry(request_json['session_id']):
            expiry_message = "has expired."
        else:
            seconds = int(login.get_session_expiry(request_json['session_id'])-get_timestamp())
            expiry_message = f"expires in {seconds} seconds."
        message = f'''Welcome to the Phone-Me information page.
{gethostname()} | {system()} | {machine()}
{len(tables.get_all_rows('user'))} users
{len(tables.get_all_rows('service'))} services
{len(tables.get_all_rows('subscription'))} subscriptions
Your session {expiry_message}'''
        return {'type': 'INFO', 'message': message}
    else:
        return login.invalid_session_message


@app.route('/user/<command>', methods=['POST'])
def user(command):
    if login.check_session_id(request.get_json()['session_id']):  # Session id validation
        if command == 'add':
            print("USER: Received add command")
            try:
                print("Parse json data")
                rjson = request.get_json()
                firstName = rjson['firstName']
                lastName = rjson['lastName']
                email = rjson['email']
                city = rjson['city']

                print("Decode signature")
                signature = tables.decode_bytes(rjson['signature'])
                print("Retrieve signer public key")
                signer_id = login.get_id_from_session(rjson['session_id'])
                print("Create user object")
                new_user = tables.User((None, firstName, lastName, email, city))  # User ID is generated by sqlite
                print(f"Made user {new_user.firstName, new_user.lastName}")
                print("Verify signature")
                if tables.verify_signature(new_user.fingerprint, signature, signer_id):  # Verify signature
                    print(f"Adding user {new_user.firstName, new_user.lastName} to database...")
                    new_user.add(signature, signer_id)
                    return {'type': 'SUCCESS', 'message': 'User added successfully!'}
                else:
                    print("Invalid signature!")
                    return {'type': 'ERROR', 'message': 'Invalid signature.'}
            except Exception as e:
                print(e)
                return {'type': 'ERROR', 'message': e}

    else:
        return login.invalid_session_message


@app.route('/service/<command>', methods=['POST'])
def service(command):
    if login.check_session_id(request.get_json()['session_id']):  # Session id validation
        if command == 'add':
            print("SERVICE: Received add command")
            try:
                rjson = request.get_json()
                name = rjson['name']
                description = rjson['description']
                signature = tables.decode_bytes(rjson['signature'])
                signer_id = login.get_id_from_session(rjson['session_id'])
                new_service = tables.Service((None, name, description))
                if tables.verify_signature(new_service.fingerprint, signature, signer_id):
                    print(f"Adding service {new_service.name} to database...")
                    new_service.add(signature, signer_id)
                    return {'type': 'SUCCESS', 'message': 'Service added successfully!'}
                else:
                    print("Invalid signature!")
                    return {'type': 'ERROR', 'message': 'Invalid signature.'}
            except Exception as e:
                print(e)
                return {'type': 'ERROR', 'message': e}


@app.route('/subscription/<command>', methods=['POST'])
def subscription(command):
    if login.check_session_id(request.get_json()['session_id']):  # Session id validation
        if command == 'add':
            print("SUBSCRIPTION: Received add command")
            try:
                rjson = request.get_json()
                userID = rjson['userID']
                serviceID = rjson['serviceID']
                date = rjson['date']
                signature = tables.decode_bytes(rjson['signature'])
                signer_id = login.get_id_from_session(rjson['session_id'])
                new_subscription = tables.Subscription((userID, serviceID, date))
                if tables.verify_signature(new_subscription.fingerprint, signature, signer_id):
                    print(f"Adding subscription {new_subscription.userID} -> {new_subscription.serviceID} to database...")
                    new_subscription.add(signature, signer_id)
                    return {'type': 'SUCCESS', 'message': 'Subscription added successfully!'}
                else:
                    print("Invalid signature!")
                    return {'type': 'ERROR', 'message': 'Invalid signature.'}
            except Exception as e:
                print(e)
                return {'type': 'ERROR', 'message': e}

    else:
        return login.invalid_session_message


@app.route('/list/<table>', methods=['GET'])
def list_table(table: str):
    if login.check_session_id(request.get_json()['session_id']):  # Session id validation
        print("Received list command")
        try:
            rjson = request.get_json()
            object_array = []
            print(f"Iterating over {rjson['amount']} rows")
            for o in tables.get_some_rows(table, rjson['amount']):
                object_array.append(o[:-2])  # Last 2 columns are always signature and signer which are unnecessary.
            print("Returning rows")
            return {'type': 'SUCCESS', 'message': object_array}
        except sqlite3.OperationalError:
            return {'type': 'ERROR', 'message': "Invalid table"}
        except Exception as e:
            return {'type': 'ERROR', 'message': e}

    else:
        return login.invalid_session_message

if __name__ == '__main__':
    app.run()
